
// drop_afm_nodefect.fe
//Author: Pranav Sudersan
//January 2025
// Surface Evolver model of a liquid drop attached to a cantilver interacting with a flat substrate
// The drop is pinned along a circular line on the cantilever (given by pin_radius)
// and makes a contact angle "bottom_angle" with the substrate below.
// Use "run" to simulate and save data for set parameters.
// The defect related parameters are dummy values, used to visualize a hypothetical defect's position, 
// without considering it in the simulation's energy minimization.
// Lengths, forces and energies are in non-dimensional units relative to s, gamma*s, gamma*s^2
// Here s = (3*vol/4*pi)^(1/3) and gamma is surface tension.

parameter bottom_angle = 108 // contact angle with substrate
parameter pin_radius = 0.644131428456558 //1.29 // pinning radius
parameter height = 1.2*0.92018775493794    // current separation of plates (SET EQUAL TO height_start!)

// defect parameters for display only
parameter defect_size = 0.0161953044869077 //defect diameter
parameter rad_nodefect = 1.16188138016565 //radius of drop-substrate contact line without defect
parameter beta = 90 //opening angle of spherical defect (=90 for hemisphere)
parameter azimuthal_angle = 0 // azimuthal angle
parameter defect_disp = 0 // defect displacement
parameter defect_posx = defect_disp*sin(azimuthal_angle*pi/180)// defect x position (perpendicular to drop axis)
parameter defect_posy = rad_nodefect+defect_disp*cos(azimuthal_angle*pi/180)// defect y position (along drop axis/center)

gravity_constant 0  // start with gravity off

keep_macros

// overview diplay
//view_matrix
//1 0 0 0
//0 1 0 0
//0 0 1 0
//0 0 0 1.5

// focused diplay
view_matrix
7.26392190669369 12.497158004959 5.99963209311849 -11.2674409822945
-12.0887845705706 9.02560531225355 -4.16399342866702 -14.6120684632819
-6.78497096972585 -2.70159128417622 13.842134170476 10.6015259583858
0 0 0 1.5


#define vol 4*pi/3
#define width 2*1.28992/sqrt(2) //(vol/height)^0.5
#define widthr 2*1.28992
#define Rd defect_size/2 //radius of defect

// Contact surface tensions
#define LOWERT -cos(bottom_angle*pi/180)

quantity upper_length info_only method edge_scalar_integral  // top contact length
scalar_integrand: 1

quantity lower_length info_only method edge_scalar_integral  // bottom contaact length
scalar_integrand: 1

quantity defect_line info_only method edge_scalar_integral  // bottom contaact length
scalar_integrand: 1

quantity upper_area info_only method edge_vector_integral  // top contact area
vector_integrand:
q1: 0
q2: x
q3: 0

quantity lower_area info_only method edge_vector_integral  // bottom contact area
vector_integrand:
q1: 0
q2: x
q3: 0

quantity mean_c info_only method mean_curvature_integral  // mean curvature

constraint 1 convex/* substrate below */
formula: z = -height/2
energy:  // for contact angle
e1: -(LOWERT*y) //+ G*z^2/2*y
e2: 0
e3: 0
content: //volume correction
c1: 0
c2: -z*x
c3: 0

constraint 2 convex/* cantilever on top */
formula: z = height/2
content:
c1: z*y
c2: 0
c3: 0

constraint pinned convex/* pinning constraint on cantilver */
formula: x^2 + y^2 = pin_radius^2

//constrain all vertices to lie between plates (not used)
constraint 3 nonpositive 
formula: z = (height/2)

constraint 4 nonnegative 
formula: z = -(height/2)

//constrain vertices to lie outside pillar region (include in faces only) 
constraint 5 nonnegative //USE ONLY FOR SMALL HEIGHT AND HYDROPHILIC SURFACE!!
formula: x^2 + y^2 = pin_radius^2

constraint defect
formula: (x-defect_posx)^2 + (y-defect_posy)^2 + (z+(height/2))^2 = Rd^2

//constraint plates (not needed)
constraint lower_plate
formula: z = -height/2

constraint upper_plate
formula: z = height/2


// for restoring after perturbation
define vertex attribute old_coord real[3]


vertices
    1   -width/2  -width/2 -height/2  constraint 1,4  /* 4 vertices on lower plate */
    12  0  -widthr/2 -height/2  constraint 1,4
    2   width/2  -width/2 -height/2  constraint 1,4
    23  widthr/2  0 -height/2  constraint 1,4
    3   width/2  width/2 -height/2  constraint 1,4
    34   0  widthr/2 -height/2  constraint 1,4
    4   -width/2  width/2 -height/2  constraint 1,4
    41  -widthr/2  0 -height/2  constraint 1,4
    5   -width/2  -width/2 height/2  constraint 2,3,pinned  /* upper plate */
    6   width/2  -width/2 height/2  constraint 2,3,pinned
    7   width/2  width/2 height/2  constraint 2,3,pinned
    8   -width/2  width/2 height/2  constraint 2,3,pinned
    53   2  2 -height/2 fixed constraint lower_plate/* for lower plane */
    54  2 -2 -height/2 fixed constraint lower_plate
    55 -2 -2 -height/2 fixed constraint lower_plate
    56 -2  2 -height/2 fixed constraint lower_plate
    61   1.5  pin_radius height/2 fixed constraint upper_plate/* for upper cantilever */
    62  1.5 -pin_radius height/2 fixed constraint upper_plate
    63 -6 -pin_radius height/2 fixed constraint upper_plate
    64 -6  pin_radius height/2 fixed constraint upper_plate
    // defect
    71 defect_posx+(Rd*sin(beta*pi/180))	defect_posy-(Rd*sin(beta*pi/180))	-height/2	fixed constraint defect,4
    72 defect_posx+(Rd*sin(beta*pi/180))	defect_posy+(Rd*sin(beta*pi/180))	-height/2	fixed constraint defect,4
    73 defect_posx-(Rd*sin(beta*pi/180))	defect_posy+(Rd*sin(beta*pi/180))	-height/2	fixed constraint defect,4
    74 defect_posx-(Rd*sin(beta*pi/180))	defect_posy-(Rd*sin(beta*pi/180))	-height/2	fixed constraint defect,4
    75 defect_posx+(Rd*sin(beta*pi/180))	defect_posy-(Rd*sin(beta*pi/180))	(2*Rd*cos(beta*pi/180))-(height/2)	fixed constraint defect,4
    76 defect_posx+(Rd*sin(beta*pi/180))	defect_posy+(Rd*sin(beta*pi/180))	(2*Rd*cos(beta*pi/180))-(height/2)	fixed constraint defect,4
    77 defect_posx-(Rd*sin(beta*pi/180))	defect_posy+(Rd*sin(beta*pi/180))	(2*Rd*cos(beta*pi/180))-(height/2)	fixed constraint defect,4
    78 defect_posx-(Rd*sin(beta*pi/180))	defect_posy-(Rd*sin(beta*pi/180))	(2*Rd*cos(beta*pi/180))-(height/2)	fixed constraint defect,4

edges  /* given by endpoints and attribute */
    1   1 12    constraint 1,4 color green lower_length lower_area mean_c/* 4 edges on lower plate */
    12   12 2    constraint 1,4 color green lower_length lower_area mean_c
    2   2 23    constraint 1,4 color green lower_length lower_area mean_c
    23   23 3    constraint 1,4 color green lower_length lower_area mean_c
    3   3 34    constraint 1,4 color green lower_length lower_area mean_c
    34   34 4    constraint 1,4 color green lower_length lower_area mean_c
    4   4 41    constraint 1,4 color green lower_length lower_area mean_c
    41   41 1    constraint 1,4 color green lower_length lower_area mean_c
    5   5 6    constraint 2,3,pinned color red upper_length upper_area mean_c /* upper plate */
    6   6 7    constraint 2,3,pinned color red upper_length upper_area mean_c
    7   7 8    constraint 2,3,pinned color red upper_length upper_area mean_c
    8   8 5    constraint 2,3,pinned color red upper_length upper_area mean_c
    13  1 5 constraint 3,4 mean_c 
    15 2 6 constraint 3,4 mean_c
    17 3 7 constraint 3,4 mean_c
    19 4 8 constraint 3,4 mean_c
    51 53 54 no_refine  fixed constraint lower_plate /* for lower plane */
    52 54 55 no_refine  fixed constraint lower_plate
    53 55 56 no_refine  fixed constraint lower_plate
    54 56 53 no_refine  fixed constraint lower_plate
    65 61 62 no_refine  fixed  constraint upper_plate /* cantilever */
    66 62 63 no_refine  fixed  constraint upper_plate
    67 63 64 no_refine  fixed  constraint upper_plate
    68 64 61 no_refine  fixed  constraint upper_plate
    //defect
    71 71 72 tension 0  constraint defect,4
    72 72 73 tension 0  constraint defect,4
    73 73 74 tension 0  constraint defect,4
    74 74 71 tension 0  constraint defect,4
    75 75 76 tension 0  constraint defect,4
    76 76 77 tension 0  constraint defect,4
    77 77 78 tension 0  constraint defect,4
    78 78 75 tension 0  constraint defect,4
    79 71 75 tension 0  constraint defect,4
    80 72 76 tension 0  constraint defect,4
    81 73 77 tension 0  constraint defect,4
    82 74 78 tension 0  constraint defect,4

faces  /* given by oriented edge loop */
    1  1 12 15 -5  -13 constraint 3,4 frontcolor lightblue
    2  2 23 17 -6 -15 constraint 3,4 frontcolor lightblue 
    3  3 34 19 -7 -17 constraint 3,4 frontcolor lightblue  
    4  4 41 13 -8 -19 constraint 3,4 frontcolor lightblue

bodies  /* one body, defined by its oriented faces */
    1   1 2 3 4    volume vol density 1 


//----------------------SCRIPT----------------------//
read

//color formatting
set background white;
refine edges where on_constraint defect;

// refinement routines
re := { refine edges where on_constraint 1 or on_constraint pinned}
re1 := { refine edges where on_constraint 1}
re2 := { refine edges where on_constraint 6} //refine defect
re4 := {foreach edge ee where on_constraint 6 do 
	{
	ff_id := ee.facets[1].id;
	refine facet where id=ff_id;
	};
	}

// evolution routines
gogo_old := {  g 20; V; u; g 20; V; r; u; g 20; V; r; u; g20; r; u; V; g 20; re; u; V; g 20; r; u; V; g 20; 
		r; u; V; g 20; U;g10;U; U;g10;U;};     
gogo2 := {  g 20; r; re; re2; g 20; r; g 20; u; V; g 20; r; u; V; g 20; r; u; V; g 100;};     
gogo_new := {  g 20; V; g 20; V; r; u; g 20; V; r; u; g20; r; u; V; g 20; re; u; V; g 30; r; u; V; g 100;};     
gogo_new2 := {refine facet where id=13; refine facet where id=16; 
	refine facet where id=24; refine facet where id=16;
	g20; refine facet where id=14; refine facet where id=15;
	refine facet where id=27; refine facet where id=30;
	g20; r; g60; u; V; g100; r; u; V; g100; r;u;V;g20; r;u;V;g20; g100;
	U;g10;U; hessian; U;g10;U; hessian; U;g10;U;hessian;hessian;
	//set edge color clear where on_constraint defect;
	}

gogo_new3 := {refine facet where id=13; refine facet where id=16; 
	refine facet where id=24; refine facet where id=16;
	g20; refine facet where id=14; refine facet where id=15;
	refine facet where id=27; refine facet where id=30;
	g20; r; g60; u; V; g100; r; u; V; g100; r;u;V;g20; r;u;V;g20; g100;
	//set edge color clear where on_constraint defect;
	}
		
gogo := {re2; //re4; re2; re4; re2; re4;
	  refine edge[50]; refine edge[52];
	  refine edge[8]; refine edge[5];
	  g20;
	  refine edge[50]; refine edge[52];
	  //refine edge[8]; refine edge[185];
	  refine edge[8]; refine edge[93];
	  g20;
	  refine edge[50]; refine edge[52];
	  //refine edge[8]; refine edge[195];
	  refine edge[8]; refine edge[103];
	  g20;
	  //refine facet[103]; refine facet[20]; u;V;
	  refine facet[43]; refine facet[20]; u;V;
	  //refine edge[8]; refine edge[205];
	  g20;
	  //refine edge[185]; refine edge[189];
	  //refine edge[185]; refine edge[189];
	  //refine edge[8]; refine edge[215];
	g60; r; g60; u; V; g100; r; u; V; g100; r;u;V;g20; //r;u;V;g20; 
	g100;
	set edge color clear where on_constraint defect;
	}
 
 
 // save simulation snapshot in various perspectives       
save_figures := {
  
  figname_suffix := sprintf "posx%#2.5g_posy%#2.5g", defect_posx, defect_posy;
  full_bounding_box on;
   window_aspect_ratio := 0.7;
   ps_gridflag on;
   ps_colorflag on;
  view_matrix := 
   {{0.606612477729296,0.32795764959847,0.258950900213831,1.21322495545859},
    {-0.319838034993415,0.658167970698604,-0.0843151262029039,-0.0302123475893527},
    {-0.268915265508035,-0.0430022000007875,0.684416450387052,0.014219942170051},
    { 0, 0, 0, 1}};
  postscript sprintf "data/tiltview_%s.eps", figname_suffix;      
   view_matrix := 
   {{15.1131383929488,26.0012815216871,12.4826879053479,-23.4427623379157},
    {-25.151629734513,18.7784538320166,-8.66350296205457,-29.358376846996},
    {-14.1166447787819,-5.62086480050331,28.7996060612096,23.270530875985},
    { 0, 0, 0,1.5}};
   postscript sprintf "data/zoomview_%s.eps", figname_suffix; 
   
   view_matrix :=
   {{1.28,16,0,-2.209988},
    {-16,1.28,0,-1.698},
    {0,0,16,8.376},
    { 0, 0, 0,1.5}};
    
    postscript sprintf "data/sideview_%s.eps", figname_suffix; 
   set edge color clear;
   set face color clear;
   set edge color blue where on_constraint 1;
   set edge color blue where on_constraint 6;
   set edge color red where on_constraint defect;
   
   view_matrix := 
    {{ 0, 0,-1, 0},
     { 0,-1, 0, 0},
     {-1, 0, 0, 0},
     { 0, 0, 0,1.5}};

   postscript sprintf "data/bottomviewfull_%s.eps", figname_suffix;

    view_matrix :=
    {{ 0, 0,-16.2120057716837, 0},
     { 0,-16.2120057716837, 0,20.8461991933837},
     {-16.2120057716837, 0, 0, 0},
     { 0, 0, 0,1.5}};
   postscript sprintf "data/bottomview_%s.eps", figname_suffix;

}

 // save current simulation snapshot       
save_currentfig := {
  
  figname_suffix := sprintf "azimang%#2.3g_posy%#2.5g", azimuthal_angle, defect_posy;
  full_bounding_box on;
  window_aspect_ratio := 0.7;
   //window_aspect_ratio := 1;
   ps_gridflag on;
   ps_colorflag on;
  postscript sprintf "data/zoomview_%s.eps", figname_suffix;

}

// calculate contact angle with substrate
compute_contactang := {
	
	contactangle_sum := 0;
	ind := 0;
	    foreach edge ee where on_constraint 1 do
	{   
	    normx := ee.vertex[1].vertex_normal[1] + ee.vertex[2].vertex_normal[1];
	    normy := ee.vertex[1].vertex_normal[2] + ee.vertex[2].vertex_normal[2];
	    normz := ee.vertex[1].vertex_normal[3] + ee.vertex[2].vertex_normal[3];
	    norm_mod := sqrt(normx^2 + normy^2 + normz^2);
	    dotprod_angle := (acos(normz/norm_mod)*180/pi);
	    contactangle_sum := contactangle_sum + (dotprod_angle);
	    pos_angle := 0.5*(atan2(ee.vertex[1].y,ee.vertex[1].x)+atan2(ee.vertex[2].y,ee.vertex[2].x))*180/pi;
	    printf "%g,%g,%g,%g,%g\n", dotprod_angle, pos_angle, (ee.vertex[1].x+ee.vertex[2].x)/2, (ee.vertex[1].y+ee.vertex[2].y)/2, (ee.vertex[1].z+ee.vertex[2].z)/2;
	    ind++;
	};
	edge_contactangle := contactangle_sum/ind; //average contact angle with substrate
}


//compute forces on top contact line
run := {
	gogo_old;
	force_latx_sum := 0;
	force_laty_sum := 0;
	force_norm_sum := 0;
        foreach edge ee where on_constraint 2 do
        {   
            normx := ee.vertex[1].vertex_normal[1] + ee.vertex[2].vertex_normal[1];
            normy := ee.vertex[1].vertex_normal[2] + ee.vertex[2].vertex_normal[2];
            normz := ee.vertex[1].vertex_normal[3] + ee.vertex[2].vertex_normal[3];
            norm_mod := sqrt(normx^2 + normy^2 + normz^2);
            force_latx := ee.length * normx/norm_mod;
            force_laty := ee.length * normy/norm_mod;
            force_norm := ee.length * normz/norm_mod;
            //rotate along azimuthal angle
            force_latx_rot := (force_latx*cos(azimuthal_angle*pi/180)) - (force_laty*sin(azimuthal_angle*pi/180));
            force_laty_rot := (force_latx*sin(azimuthal_angle*pi/180)) + (force_laty*cos(azimuthal_angle*pi/180));
            force_lat := sqrt(force_latx_rot^2 + force_laty_rot^2);
            force_latx_sum := force_latx_sum + force_latx_rot;
            force_laty_sum := force_laty_sum + force_laty;
            force_norm_sum := force_norm_sum + force_norm;
        };
	//radius of contact line below. NOTE: Use this to set "rad_nodefect" in drop_afm.fe
	rad_nodefect_max := max(vertex where on_constraint 1, x);
	dataline := sprintf "%g\t%g\t%g\t%g\t%g\t%g\t%g\t%g\n", pin_radius, height, rad_nodefect_max, force_latx_sum, force_laty_sum, force_norm_sum, total_energy, bottom_angle;
	printf "RESULT: %s", dataline;

	outfile := "data/results.txt"; //set output data file path.
	printf "%s",dataline >> outfile;
	//uncomment below to save figures
	//save_figures;
	//save_currentfig;  
        
        }

            


